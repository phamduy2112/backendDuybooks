import { Injectable } from '@nestjs/common';
import { CreateNotificationServiceDto } from './dto/create-notification-service.dto';
import { UpdateNotificationServiceDto } from './dto/update-notification-service.dto';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class NotificationServiceService {

  constructor(private readonly prismaService: PrismaService) {}

  // Th√™m th√¥ng b√°o m·ªõi
  async createNotification(data: { user_id: number; message: string; type: string }) {
      try {
          console.log('üì© Nh·∫≠n d·ªØ li·ªáu:', data);

          if (!data.user_id) {
              throw new Error('‚ùå user_id b·ªã undefined!');
          }

          const response = await this.prismaService.notifications.create({
              data: {
                  user_id: data.user_id,
                  message: data.message,
                  type: data.type,
                  status: 'unread',
              },
          });

          console.log('‚úÖ Th√™m th√¥ng b√°o th√†nh c√¥ng!');
          return response;
      } catch (e) {
          console.error('‚ùå L·ªói khi th√™m th√¥ng b√°o:', e);
          return e;
      }
  }

  // L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa user v√† x√≥a th√¥ng b√°o ƒë√£ ƒë·ªçc
  async findAll(userId: number) {
      try {
          console.log('üì© L·∫•y th√¥ng b√°o cho user:', userId);

          // L·∫•y t·∫•t c·∫£ th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user
          const notifications = await this.prismaService.notifications.findMany({
              where: { user_id: userId },
              orderBy: { created_at: 'desc' }, // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
          });

          console.log('‚úÖ L·∫•y th√¥ng b√°o th√†nh c√¥ng!');

          // X√≥a t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
          await this.prismaService.notifications.deleteMany({
              where: {
                  user_id: userId,
                  status: 'read',
              },
          });

          console.log('üóëÔ∏è ƒê√£ x√≥a c√°c th√¥ng b√°o ƒë√£ ƒë·ªçc.');

          return notifications;
      } catch (e) {
          console.error('‚ùå L·ªói khi l·∫•y th√¥ng b√°o:', e);
          return e;
      }
  }
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o th√†nh "read"
async markAsRead(notificationId: number) {
  try {
      console.log(`üì© ƒê√°nh d·∫•u th√¥ng b√°o ${notificationId} l√† "read"`);

      const updatedNotification = await this.prismaService.notifications.update({
          where: { id: notificationId },
          data: { status: 'read' },
      });

      console.log('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o th√†nh c√¥ng!');
      return updatedNotification;
  } catch (e) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o:', e);
      return e;
  }
}
}
