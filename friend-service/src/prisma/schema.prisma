generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model code {
  id         Int       @id @default(autoincrement())
  user_id    Int
  code       String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model friends {
  id                             Int       @id @default(autoincrement())
  user_id                        Int
  friend_id                      Int
  status                         String?   @default("pending") @db.VarChar(20)
  created_at                     DateTime? @default(now()) @db.Timestamp(6)
  users_friends_friend_idTousers users     @relation("friends_friend_idTousers", fields: [friend_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_friends_user_idTousers   users     @relation("friends_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, friend_id], map: "unique_friendship")
}

model notifications {
  id         Int       @id @default(autoincrement())
  user_id    Int
  message    String?
  type       String?   @db.VarChar(50)
  status     String?   @default("unread") @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id                               Int                 @id @default(autoincrement())
  full_name                        String?             @db.VarChar(50)
  email                            String?             @unique @db.VarChar(100)
  password                         String?             @db.VarChar(255)
  phone_number                     String?             @db.VarChar(10)
  avatar_url                       String?
  nick_name                        String?             @db.VarChar(100)
  birth_date                       DateTime?           @db.Date
  marriage_condition               String?
  role                             String?             @default("customer") @db.VarChar(50)
  status                           String?             @default("active") @db.VarChar(20)
  bio                              String?
  created_at                       DateTime?           @default(now()) @db.Timestamp(6)
  code                             code[]
  comment_reactions                comment_reactions[]
  comments                         comments[]
  friends_friends_friend_idTousers friends[]           @relation("friends_friend_idTousers")
  friends_friends_user_idTousers   friends[]           @relation("friends_user_idTousers")
  post_reactions                   post_reactions[]
  posts                            posts[]
  saved_posts                      saved_posts[]
}

model comment_reactions {
  id            Int       @id @default(autoincrement())
  comment_id    Int
  user_id       Int
  reaction_type String    @db.VarChar(20)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  comments      comments  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment")
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([comment_id, user_id], map: "unique_comment_reaction")
}

model comments {
  id                Int                 @id @default(autoincrement())
  post_id           Int
  user_id           Int
  parent_id         Int?
  content           String
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  comment_reactions comment_reactions[]
  comments          comments?           @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comments    comments[]          @relation("commentsTocomments")
  posts             posts               @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_images {
  id         Int       @id @default(autoincrement())
  post_id    Int
  image_url  String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_reactions {
  id            Int       @id @default(autoincrement())
  post_id       Int
  user_id       Int
  reaction_type String    @db.VarChar(20)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  posts         posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
}

model posts {
  id             Int              @id @default(autoincrement())
  user_id        Int
  content        String
  visibility     String?          @default("public") @db.VarChar(15)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  comments       comments[]
  post_images    post_images[]
  post_reactions post_reactions[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  saved_posts    saved_posts[]
}

model saved_posts {
  id         Int       @id @default(autoincrement())
  post_id    Int
  user_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
}
